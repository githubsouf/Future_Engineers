import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

def train_major_classifier(csv_path):
    """
    Trains a multi-class classifier (Random Forest) to predict the best major (filiere).
    Applies custom scaling to enforce approximate weighting:
       - Big Five:    50%
       - Motivation:  20%
       - Interests:   20%
       - Familial:    10%

    Saves the model and label encoder to disk.
    """
    # 1. Load the dataset
    df = pd.read_csv(csv_path)
    print(f"Loaded dataset with shape: {df.shape}")

    # 2. Separate features (X) and target (y)
    X = df.drop(columns=["filiere"])
    y = df["filiere"]

    # 3. Define scale factors for each group of features
    #    Ratio = 5 : 2 : 2 : 1  =>  50% : 20% : 20% : 10%
    BIG_FIVE_SCALE = 20.0
    MOTIVATION_SCALE = 1.0
    INTEREST_SCALE = 1.0
    FAMILIAL_SCALE = 0.1  # you could choose 1.0 or any baseline

    # 4. Apply scaling to each column group
    for col in X.columns:
        if (col.startswith("extraversion_") or
            col.startswith("ouverture_") or
            col.startswith("conscienciosite_") or
            col.startswith("stabilite_emotionnelle_") or
            col.startswith("agreabilite_")):
            X[col] *= BIG_FIVE_SCALE
        elif col.startswith("motivation_"):
            X[col] *= MOTIVATION_SCALE
        elif col.startswith("interest_"):
            X[col] *= INTEREST_SCALE
        elif col.startswith("fam_"):
            X[col] *= FAMILIAL_SCALE

    # 5. Encode the target labels
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(y)

    # 6. Train/test split (80% train, 20% test)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
    )
    print(f"Train size: {X_train.shape[0]}, Test size: {X_test.shape[0]}")

    # 7. Create and train a Random Forest model
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # 8. Evaluate on the test set
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Test Accuracy: {accuracy:.4f}")

    print("\nClassification Report:")
    print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

    # 9. Save the model and label encoder
    joblib.dump(model, "modelfinal/model.pkl")
    joblib.dump(label_encoder, "modelfinal/label_encoder.pkl")
    print("\nModel and label encoder saved as 'model.pkl' and 'label_encoder.pkl'.")


if __name__ == "__main__":
    csv_file = "modelfinal\dataset_synth_bigfive_extended.csv"  # The file generated by your data script
    train_major_classifier(csv_file)
    print("\nTraining complete!")
